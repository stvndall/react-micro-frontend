"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function notify(callbacks, props) {
    callbacks.forEach(function (cb) { return cb(props); });
}
function defaultParentHandler() {
    this.set.apply(this, arguments);
}
function getParentHandler(parent, options) {
    if (!parent ||
        options.handleReceivedProps === false) {
        return;
    }
    if (options.handleReceivedProps === true ||
        options.handleReceivedProps === undefined) {
        return defaultParentHandler;
    }
    return options.handleReceivedProps;
}
function create(options) {
    return function (providers, parent) {
        if (providers === void 0) { providers = {}; }
        var callbacks = [];
        var hasSubscribed = false;
        var parentHandler = getParentHandler(parent, options);
        var parentSubscription;
        var p = {
            props: parent
                ? Object.assign({}, parent.props)
                : {},
            parent: parent,
            providers: providers,
        };
        p.set = function (props, replace) {
            if (replace === void 0) { replace = false; }
            p.props = replace
                ? Object.assign({}, props)
                : Object.assign({}, p.props, props);
            return notify(callbacks, p.props);
        };
        p.subscribe = function (cb) {
            if (!hasSubscribed) {
                hasSubscribed = true;
                if (options.didSubscribe) {
                    options.didSubscribe.apply(p);
                }
            }
            callbacks.push(cb);
            cb(p.props);
            return function () {
                callbacks = callbacks.filter(function (callback) { return cb !== callback; });
            };
        };
        p.destroy = function () {
            if (options.willDestroy) {
                options.willDestroy.apply(p);
            }
            if (parentSubscription) {
                parentSubscription();
                parent.destroy();
            }
            callbacks = [];
        };
        if (options.initialize) {
            options.initialize.apply(p);
        }
        if (parentHandler) {
            parentSubscription = parent.subscribe(function (props) { return parentHandler.apply(p, [props]); });
        }
        return p;
    };
}
exports.create = create;
//# sourceMappingURL=create.js.map