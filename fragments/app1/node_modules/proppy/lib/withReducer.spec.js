"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var withReducer_1 = require("./withReducer");
describe('proppy :: withReducer', function () {
    test('is a function', function () {
        expect(typeof withReducer_1.withReducer).toEqual('function');
    });
    function testReducer(state, action) {
        switch (action.type) {
            case 'INCREMENT':
                return { value: state.value + 1 };
            case 'DECREMENT':
                return { value: state.value - 1 };
            default:
                return state;
        }
    }
    test('initial state', function () {
        var P = withReducer_1.withReducer('counter', 'dispatch', testReducer, { value: 0 });
        var p = P();
        expect(p.props.counter.value).toEqual(0);
        expect(typeof p.props.dispatch).toEqual('function');
    });
    test('initial subscription', function () {
        expect.assertions(3);
        var P = withReducer_1.withReducer('counter', 'dispatch', testReducer, { value: 0 });
        var p = P();
        expect(p.props.counter.value).toEqual(0);
        expect(typeof p.props.dispatch).toEqual('function');
        p.subscribe(function (props) {
            expect(props.counter.value).toEqual(0);
        });
    });
    test('updates', function () {
        var P = withReducer_1.withReducer('counter', 'dispatch', testReducer, { value: 0 });
        var p = P({ foo: 'foo value' });
        expect(p.props.counter.value).toEqual(0);
        expect(typeof p.props.dispatch).toEqual('function');
        p.props.dispatch({ type: 'INCREMENT' });
        expect(p.props.counter.value).toEqual(1);
        p.props.dispatch({ type: 'INCREMENT' });
        expect(p.props.counter.value).toEqual(2);
        p.props.dispatch({ type: 'DECREMENT' });
        expect(p.props.counter.value).toEqual(1);
        p.props.dispatch({ type: 'I_DONT_EXIST' });
        expect(p.props.counter.value).toEqual(1);
        p.props.dispatch(function (props, providers) {
            expect(p.props.counter.value).toEqual(1);
            expect(providers).toEqual({ foo: 'foo value' });
            return { type: 'INCREMENT' };
        });
        expect(p.props.counter.value).toEqual(2);
    });
});
//# sourceMappingURL=withReducer.spec.js.map