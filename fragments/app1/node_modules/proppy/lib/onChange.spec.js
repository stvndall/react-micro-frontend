"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/* global describe, test, expect */
var compose_1 = require("./compose");
var withProps_1 = require("./withProps");
var withState_1 = require("./withState");
var onChange_1 = require("./onChange");
describe('proppy :: onChange', function () {
    test('is a function', function () {
        expect(typeof onChange_1.onChange).toEqual('function');
    });
    test('changes by string', function () {
        var P = compose_1.compose(withProps_1.withProps({ foo: 'initial foo' }), withState_1.withState('counter', 'setCounter', 0), onChange_1.onChange('counter', function (props) { return ({
            foo: "changed foo with counter " + props.counter
        }); }));
        var p = P();
        expect(p.props.foo).toEqual('initial foo');
        expect(p.props.counter).toEqual(0);
        p.props.setCounter(5);
        expect(p.props.foo).toEqual('changed foo with counter 5');
    });
    test('changes by comparison', function () {
        var P = compose_1.compose(withProps_1.withProps({ foo: 'initial foo' }), withState_1.withState('counter', 'setCounter', 0), onChange_1.onChange(function (prevProps, nextProps) { return prevProps.counter !== nextProps.counter; }, function (props) { return ({
            foo: "changed foo with counter " + props.counter
        }); }));
        var p = P();
        expect(p.props.foo).toEqual('initial foo');
        expect(p.props.counter).toEqual(0);
        p.props.setCounter(5);
        expect(p.props.counter).toEqual(5);
        expect(p.props.foo).toEqual('changed foo with counter 5');
        // should still be same since no change
        p.props.setCounter(5);
        expect(p.props.counter).toEqual(5);
        expect(p.props.foo).toEqual('changed foo with counter 5');
        p.props.setCounter(10);
        expect(p.props.counter).toEqual(10);
        expect(p.props.foo).toEqual('changed foo with counter 10');
    });
    test('changes by string, returning async props', function () {
        var P = compose_1.compose(withState_1.withState('foo', 'setFoo', 'initial foo'), withState_1.withState('counter', 'setCounter', 0), onChange_1.onChange('counter', function (props, providers, cb) {
            cb({
                foo: "changed foo with counter " + props.counter
            });
        }));
        var p = P();
        expect(p.props.foo).toEqual('initial foo');
        expect(p.props.counter).toEqual(0);
        p.props.setCounter(5);
        expect(p.props.foo).toEqual('changed foo with counter 5');
    });
});
//# sourceMappingURL=onChange.spec.js.map