"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
/* global describe, test, expect */
var compose_1 = require("./compose");
var withProps_1 = require("./withProps");
var withState_1 = require("./withState");
var map_1 = require("./map");
describe('proppy :: map', function () {
    test('is a function', function () {
        expect(typeof map_1.map).toEqual('function');
    });
    test('with plain object', function () {
        var P = compose_1.compose(withProps_1.withProps({ counter: 10 }), map_1.map(function (props) { return ({
            counter: props.counter * 10,
        }); }));
        var p = P();
        expect(p.props).toEqual({
            counter: 100,
        });
    });
    test('with state', function () {
        var P = compose_1.compose(withProps_1.withProps({ staticCounter: 10 }), withState_1.withState('counter', 'setCounter', 0), map_1.map(function (props) { return (__assign({}, props, { staticCounter: props.staticCounter * 10, counter: props.counter * 10 })); }));
        var p = P();
        expect(p.props.counter).toEqual(0);
        expect(p.props.staticCounter).toEqual(100);
        p.props.setCounter(5);
        expect(p.props.counter).toEqual(50);
        expect(p.props.staticCounter).toEqual(100);
    });
    test('subscription', function () {
        expect.assertions(2);
        var P = compose_1.compose(withProps_1.withProps({ counter: 10 }), map_1.map(function (props) { return ({
            counter: props.counter * 10,
        }); }));
        var p = P();
        expect(p.props).toEqual({
            counter: 100,
        });
        p.subscribe(function (props) {
            expect(props).toEqual({
                counter: 100,
            });
        });
    });
});
//# sourceMappingURL=map.spec.js.map